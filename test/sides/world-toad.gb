#side World Toad
#author Devon
#date September 23 2002

Principles:
1) Large cells, to exploit their combat advantage.
2) Coordination in combat.
3) Stay out of trouble.
4) Don't waste energy.

#color fea

#type Pale Wartless One
#color a40

States:
  Idle - gestate, food->eat, shot->chase, robot->combat, message->chase
  Chase - shot, robot->combat, message
  Combat - robot
  Flee (later) - robot, shot, message

To do:
  give up eating when blocked
  swarming
  eating during combat
  fleeing from superior force

#hardware
  armor 750
  repair-rate .4   ;c 300
  grenades 60 12 20
  
  processor 25
  
  energy 600 10
  solar-cells .5
  eater 1.5
  constructor 1.8
  
  engine .25
  
  robot-sensor 12
  food-sensor 10
  shot-sensor 6

#code

#var next-robot-scan
#var next-food-scan
#var next-shot-scan
#const shot-scan-interval 12

#var food-time

#start
  max-repair-rate repair-rate!
  idle& jump

;;;; idle ;;;;

idle:
  time next-food-scan!
do
  constructor-type nif 1 constructor-type! then
  energy max-energy .7 * > constructor-max-rate 0 ifev constructor-rate!
  
  time next-food-scan >= eaten not and if
    fire-food-sensor sync
    food-found if
      time 45 + next-food-scan!
      time food-time!
    else
      time 250 + next-food-scan!
    then
  then
  food-found if
    food-position seek-location
  else
    0 engine-power!
  then

  time next-robot-scan >= if
    fire-robot-sensor sync
    robot-found acquire& ifg
    time 57 + next-robot-scan!
  then
  time next-shot-scan >= if
    fire-shot-sensor sync
    shot-found if
      shot-velocity norm chase-shot& ifg
    then
    time shot-scan-interval + next-shot-scan!
  then

  ;answer calls for help
forever

;;;; chase ;;;;

#vector destination

chase-shot:
  locate-shot-source^
  0 constructor-rate!
do
  destination seek-location
  
  time next-robot-scan >= if
    fire-robot-sensor sync
    robot-found acquire& ifg
    position destination 4 in-range if
      0 engine-power!
      idle& jump
    then
    time 35 + next-robot-scan!
  then
  time next-shot-scan >= if
    fire-shot-sensor sync
    shot-found if
      shot-velocity norm locate-shot-source& ifc
    then
    time shot-scan-interval + next-shot-scan!
  then
forever

locate-shot-source:
  -20 shot-velocity angle polar-to-rect shot-position v+ destination!
return

;;;; combat ;;;;

acquire:
  shoot^
  adjust-range^
  ;announce 
combat:
  0 constructor-rate!   ;save energy and mass
do
  time next-robot-scan >= if
    fire-robot-sensor sync
    robot-found if
      shoot^
      adjust-range^
    else
      time 100 + next-robot-scan!
      idle& jump
    then
  then
  ;steer? how are we moving?
  ;eat food if close?
forever

shoot:
  robot-velocity velocity v- 2dup
    robot-distance grenades-speed / vs* robot-position v+   ;estimated target position
    position dist grenades-speed / vs* robot-position v+
  position v- rect-to-polar fire-grenade
  time grenades-reload-time + next-robot-scan!
return

#const min-ok-range 5
#const max-ok-range 10
#const combat-adjust-speed .1
#const combat-distance -9

;; move to keep acceptable range.
adjust-range:
  robot-position robot-velocity grenades-reload-time vs* v+   ;future position
  2dup position v- angle combat-distance swap polar-to-rect   ;delta
  v+ seek-location
return

adjust-range-old:
  robot-distance min-ok-range < if
    combat-adjust-speed negate robot-direction polar-to-rect robot-velocity v+ engine-velocity!
    engine-max-power engine-power!
  else robot-distance max-ok-range > if
    combat-adjust-speed robot-direction polar-to-rect robot-velocity v+ engine-velocity!
    engine-max-power engine-power!
  else   ; range ok
    robot-velocity engine-velocity!
    robot-velocity norm .01 > engine-max-power 0 ifev engine-power!
  then then
return

;;;; flee ;;;;

flee:
do
  
forever

#end
