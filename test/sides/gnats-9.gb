#side Gnats
#author Matt Burkholder
#date 11/8/2
#color 000

1-15-03 Reduced size of cells, added shields, bigger repairer,  runs away a little more
1-15-03 Uses world size

#type Gnat
#color fff
#hardware
	processor 15
	engine 0.125
	constructor 0.75
	energy 300 40
	solar-cells 0.005
	eater 1.25
	syphon 1.0
	robot-sensor 7
	food-sensor 8
	shot-sensor 2
	armor 150
	repair-rate 0.3
 shield 0.3
	blaster 5.0 1 5
 
 radio read write

#code

#const gnat 1
#const tree 2
#const Swarm-range 35
#const target-valid-time 200
#const robot-sensor-delay 35
#const food-sensor-delay 50
#const shot-sensor-delay 5
#const edge-space 10

#var target-sender 0
#var target-found 0
#var wander-angle 0
#var destx 0
#var desty
#var LastEnergy 0
#var LastTime 0
#var LastDamage 0
#var food-sensor-now 0
#var robot-sensor-now 0
#var shot-sensor-now 0
#var Right-Edge 0
#var Top-Edge 0

#vector dest
#vector center

world-width 2 / world-height 2 / center!
world-width edge-space - Right-Edge!
world-height edge-space - Top-Edge!
time 5 < if 0 1 write 0 4 write 0 7 write then
time 10 + robot-sensor-now!

CheckForDanger^
pi 3 / id * dup wander-angle!
;time 50 + food-sensor-now!
Movement:
0.05 engine-power!				
0.2 wander-angle polar-to-rect engine-velocity! 
wander-angle food-sensor-focus-direction!
food-sensor-range 0.5 * food-sensor-focus-distance!
;shot-sensor-range shot-sensor-focus-distance!

Buzz: CheckDamage^
time 1 - food-sensor-now!
do
		do 
					energy food-sensor-firing-cost > if
								time food-sensor-now > if
											fire-food-sensor sync
											food-found if
														food-position desty! destx!
														0 engine-power! 
											else 
													  center position v- 2dup center edge-space dup v-
               rot abs < rot abs rot > or if
                   0 1 random 0.2 > if
	                      2drop position edge-space < swap Right-Edge < and if
                          0 wander-angle! 
                       else position swap edge-space < if
                           pi 1.5 * wander-angle! drop
                       else Top-Edge > if
                           pi wander-angle! 
                       else pi 0.5 * wander-angle! then then then
							             else angle wander-angle! then else 2drop then
															0.2 wander-angle polar-to-rect engine-velocity! 
											then 
           time food-sensor-delay + food-sensor-now!
								then
								CheckDamage^
								CheckComms^  
	       energy 50 > CheckForDanger& ifc
								energy 0.008 - engine-power!
						else Recharge^	then 
      construct^
			destx until-loop

			do
						destx desty seek-location ;Snake-location^ sync
						CheckDamage^
						CheckComms^
      CheckForDanger^
						energy 2 < Recharge& ifc
      construct^
			destx desty position v- norm radius > while-loop 
						
    0 0 engine-velocity!
   do 
						gnat constructor-type!
      construct^
      CheckDamage^
						CheckComms^
						CheckForDanger^
						;destx desty Snake-location^ sync
			eaten while-loop
			0 destx! 0 desty!
			0 constructor-rate! 0 repair-rate!
		  random-angle wander-angle! 
forever

Pregnant:
		constructor-progress constructor-remaining 1 + / 3 > return

Wounded:
  armor max-armor / 0.25 < return

Construct:
   energy constructor-remaining 1.5 * > energy 150 > or
   constructor-max-rate 0 ifev constructor-rate!
return

CheckForDanger:
			energy 5 < ifr
   time robot-sensor-now > if
		 	fire-robot-sensor 
    time robot-sensor-delay + robot-sensor-now! then
			time shot-sensor-now > if
     fire-shot-sensor
     time shot-sensor-delay + shot-sensor-now! then
		 sync
			robot-found BFound& ifg
			shot-found SFound& ifg
return

CheckDamage:
			LastDamage armor dup LastDamage! max-armor < if
								max-repair-rate repair-rate! 
        wounded^ energy 20 > and max-shield 0 ifev shield!
								armor > CheckForDanger& ifg 
			else drop 0 repair-rate!  0 shield! then
return


CheckComms:
		energy 50 < Pregnant^ Wounded^ or or ifr
	1 read time > if
		1 target-sender!
		2 read 
		3 read 
		Swarm^  then
	4 read time > if
		4 target-sender!
		5 read 
		6 read 
		Swarm^  then 
	7 read time > if
		7 target-sender!
		8 read 
		9 read 
		Swarm^  then
		10 read time > if
				10 target-sender!
				11 read
				12 read
				Rescue^ 2drop then
   13 read time > if
      13 target-sender!
      SwarmNoCheck^ then
return

Snake-location:
			position v- 2dup norm dup 5 > if
						drop rect-to-polar 
					0.3 time pi * 20 / sin * + polar-to-rect 
						engine-velocity! engine-max-power engine-power!
			else
						radius < if
									0 0 engine-velocity! engine-max-power engine-power! 2drop
						else
									4 vs/ engine-velocity! engine-max-power 0.5 * engine-power!
			then then
return


Swarm:
	 position v- norm Swarm-Range > blaster-cooldown or ifr
	 SwarmNoCheck: rdrop  rdrop 
	0 constructor-rate!
do
	target-sender 1 + read target-sender 2 + read dest!
 dest seek-location ; Snake-location^
	energy robot-sensor-firing-cost > time robot-sensor-now > and if
		fire-robot-sensor sync 
		robot-found Attack& ifg 
		time robot-sensor-delay + robot-sensor-now! then
  position dest 15 in-range energy 20 > and max-shield 0 ifev shield!
time target-sender read > until-loop
	 0 target-sender!
		0 target-found!
		0 destx! 0 0 dest!
	Buzz& jump


SFound: rdrop 
		0 constructor-rate!
  shot-velocity norm if
				shot-position shot-velocity 2dup norm -12 / vs/ v+
				2dup dest! BroadCast^  
		else 
     shot-position 2dup dest!   
     BroadCast^ then
  shot-direction blaster-cooldown Pregnant^ Wounded^ or  or 
  energy 50 < or 1 type-population 4 < or Retreat& ifg
  shot-sensor-focus-direction!
		time robot-sensor-delay + robot-sensor-now!
Scout:
		do
				time robot-sensor-now > if
       fire-robot-sensor sync
	      time robot-sensor-delay + robot-sensor-now! 
       robot-found Attack& ifg then
    time shot-sensor-now > if
       fire-shot-sensor sync
							shot-found shot-velocity norm and if				
          shot-position shot-velocity 2dup norm  -12 / vs/ v+
		        2dup dest!
          target-found 2 + write
          target-found 1 + write
          time target-valid-time + target-found write
      then 
						time shot-sensor-delay + shot-sensor-now!
    then	
    armor max-armor < max-repair-rate 0 ifev repair-rate! 
    energy 20 > max-shield 0 ifev shield!
    dest snake-location^ sync
speed while-loop
;time target-found read < while-loop
		;0 target-found write
  0 target-found!
  0 0 dest! 0 destx!
Buzz& jump


BroadCast:
	1 read time < if
		1 target-found!
		3 write 2 write
		time target-valid-time + 1 write 
		return then
	4 read time < if
		4 target-found!
		6 write 5 write
		time target-valid-time + 4 write 
		return then
	7 read time < if
		7 target-found!
		9 write 8 write
		time target-valid-time + 7 write 
		return then
 	10 target-found! 2drop
return


BFound: 
		0 constructor-rate!
		robot-position 2dup dest!
		BroadCast^ 
  Pregnant^ wounded^ or blaster-cooldown or robot-distance 3.5 > and ifr rdrop
Attack:  
	Robot-Direction syphon-direction! 
	;engine-max-power engine-power!
	do 
	  robot-distance syphon-range min syphon-distance!
	  robot-direction syphon-direction! 
			blaster-cooldown nif
	  	energy blaster-firing-cost > robot-distance blaster-range  radius robot-radius + + <  and if
		   	robot-direction fire-blaster then 0 constructor-rate!
 			else energy 290 > constructor-max-rate 0 ifev constructor-rate! then

			robot-position robot-velocity robot-distance speed 0.1 max / vs* v+ 
   robot-position position v- robot-distance -0.8 * vs/ v+ seek-location
	  
   armor max-armor < max-repair-rate 0 ifev repair-rate! 
   
   robot-distance robot-radius - radius - syphon-range < if
      syphon-max-rate syphon-rate!
      0 shield!
   else
      0 syphon-rate!
      max-shield shield!
   then

	  target-found if
							robot-found 25 > if
          0 target-found write
          13 target-found! then
				  time target-valid-time + target-found write
				  robot-position target-found 2 + write
				  target-found 1 + write
		  else  
      target-sender read time < if
								target-sender target-found!
  	     0 target-sender! then 
    then
		energy 20 < wounded^ or Buzz& ifg
	 fire-robot-sensor sync
robot-found while-loop 
stack dropn
target-found if
	0 target-found write
	0 target-found 1 + write
	0 target-found 2 + write
	0 target-found! then
 target-sender if
 0 target-sender write
 0 target-sender!  then
	0 syphon-rate!
 0 syphon-distance!
 0 destx! 0 desty! 0 engine-power! 
 sync sync sync
Buzz& jump

#var Extra-Time 0
#var Starve-Time

Recharge:
		0 engine-power!
		0 constructor-rate!
		0 Extra-Time!
  time 1000 + Starve-Time! 
  syphon-max-rate syphon-rate!
  random-angle syphon-direction!
  syphon-range syphon-distance!
  do speed while-loop
		do 
			time 10 read id + > time Extra-Time > and if
					time 75 + 10 write 
					position 12 write 11 write
				 time 100 + Extra-Time! then
					Extra-Time 10 read < if 0 Extra-Time! then  
     syphoned nif syphon-direction 0.8 + syphon-direction! then
     ;time Starve-Time > if 0 constructor-type! then
     sync sync sync sync sync
		energy 20 < syphoned or while-loop
		Extra-Time if 0 10 write then
  0 syphon-distance! 0 syphon-rate!
return

Retreat:
				 pi + wander-angle!
				time 150 + food-sensor-now!
				0 destx!
Movement jump

#var Half-energy
Rescue:
  2dup position v- norm swarm-range > energy 100 < or ifr
		desty! destx! 0 10 write
  0 constructor-rate!
  energy 2 / half-energy!
	do
		destx desty 2dup seek-location
		position v- 2dup
		angle syphon-direction!
		syphon-range syphon-distance!
		norm dup 3 < syphon-max-rate negate 0 ifev syphon-rate!
	radius > energy half-energy > syphoned and or while-loop
	0 syphon-distance! 0 syphon-rate!
Buzz& jump

#end
